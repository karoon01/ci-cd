version: 2.1

orbs:
  gcp-gcr: circleci/gcp-gcr@0.6.1
  cloudrun: circleci/gcp-cloud-run@1.0.0
  node: circleci/node@5.1.0

jobs:
  lint_backend:
    executor:
      name: node/default
    steps:
      - checkout
      - node/install-packages:
          include-branch-in-cache-key: false
      - run: npm run lint
  build_test_backend:
    docker:
      - image: cimg/node:18.14.1
    steps:
      - checkout
      - run: sudo npm install -g npm@latest
      - node/install-packages:
          cache-path: ~/project/node_modules
          override-ci-command: npm install
      - run:
          name: Run tests
          command: npm test
  deploy_staging_backend:
    docker:
      - image: google/cloud-sdk:alpine
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Configure gcloud
          command: |
            echo $STAGE_GCLOUD_SERVICE_KEY | base64 -d | gcloud auth activate-service-account --key-file=-
            gcloud config set project ${PROJECT_ID}
            gcloud config set run/region ${STAGE_REGION}
            gcloud auth configure-docker
      - run:
          name: Build and tag Docker image
          command: |
            docker build --build-arg ENV_FILE=.env.staging -t gcr.io/${PROJECT_ID}/${STAGE_APP_NAME}:${CIRCLE_SHA1} .
            docker tag gcr.io/${PROJECT_ID}/${STAGE_APP_NAME}:${CIRCLE_SHA1} gcr.io/${PROJECT_ID}/${STAGE_APP_NAME}:latest
      - run:
          name: Push Docker image to Container Registry
          command: |
            docker push gcr.io/${PROJECT_ID}/${STAGE_APP_NAME}:${CIRCLE_SHA1}
            docker push gcr.io/${PROJECT_ID}/${STAGE_APP_NAME}:latest
      - run:
          name: Deploy to Cloud Run
          command: |
            gcloud run deploy ${STAGE_APP_NAME} --region ${STAGE_REGION} --image gcr.io/${PROJECT_ID}/${STAGE_APP_NAME}:${CIRCLE_SHA1} --platform managed --allow-unauthenticated --project ${PROJECT_ID}
  deploy_production_backend:
    docker:
      - image: google/cloud-sdk:alpine
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Configure gcloud
          command: |
            echo $PROD_GCLOUD_SERVICE_KEY | base64 -d | gcloud auth activate-service-account --key-file=-
            gcloud config set project ${PROJECT_ID}
            gcloud config set run/region ${PROD_REGION}
            gcloud auth configure-docker
      - run:
          name: Build and tag Docker image
          command: |
            docker build --build-arg ENV_FILE=.env.prod -t gcr.io/${PROJECT_ID}/${PROD_APP_NAME}:${CIRCLE_SHA1} .
            docker tag gcr.io/${PROJECT_ID}/${PROD_APP_NAME}:${CIRCLE_SHA1} gcr.io/${PROJECT_ID}/${PROD_APP_NAME}:latest
      - run:
          name: Push Docker image to Container Registry
          command: |
            docker push gcr.io/${PROJECT_ID}/${PROD_APP_NAME}:${CIRCLE_SHA1}
            docker push gcr.io/${PROJECT_ID}/${PROD_APP_NAME}:latest
      - run:
          name: Deploy to Cloud Run
          command: |
            gcloud run deploy ${PROD_APP_NAME} --region ${PROD_REGION} --image gcr.io/${PROJECT_ID}/${PROD_APP_NAME}:${CIRCLE_SHA1} --platform managed --allow-unauthenticated --project ${PROJECT_ID}

  lint_client:
    working_directory: ~/project/client
    executor:
      name: node/default
    steps:
      - checkout:
          path: ~/project
      - node/install-packages:
          include-branch-in-cache-key: false
      - run: npm run lint
  build_test_client:
    working_directory: ~/project/client
    docker:
      - image: cimg/node:18.14.1
    steps:
      - checkout:
          path: ~/project
      - run: sudo npm install -g npm@latest
      - node/install-packages:
          cache-path: ~/project/node_modules
          override-ci-command: npm install
      - run:
          name: Run tests
          command: npm test
  deploy_staging_client:
    working_directory: ~/project/client
    docker:
      - image: google/cloud-sdk:alpine
    steps:
      - checkout:
          path: ~/project
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Configure gcloud
          command: |
            echo $STAGE_CLIENT_GCLOUD_SERVICE_KEY | base64 -d | gcloud auth activate-service-account --key-file=-
            gcloud config set project ${PROJECT_ID}
            gcloud config set run/region ${STAGE_CLIENT_REGION}
            gcloud auth configure-docker
      - run:
          name: Build and tag Docker image
          command: |
            docker build -t gcr.io/${PROJECT_ID}/${STAGE_CLIENT_APP_NAME}:${CIRCLE_SHA1} .
            docker tag gcr.io/${PROJECT_ID}/${STAGE_CLIENT_APP_NAME}:${CIRCLE_SHA1} gcr.io/${PROJECT_ID}/${STAGE_CLIENT_APP_NAME}:latest
      - run:
          name: Push Docker image to Container Registry
          command: |
            docker push gcr.io/${PROJECT_ID}/${STAGE_CLIENT_APP_NAME}:${CIRCLE_SHA1}
            docker push gcr.io/${PROJECT_ID}/${STAGE_CLIENT_APP_NAME}:latest
      - run:
          name: Deploy to Cloud Run
          command: |
            gcloud run deploy ${STAGE_CLIENT_APP_NAME} --region ${STAGE_CLIENT_REGION} --image gcr.io/${PROJECT_ID}/${STAGE_CLIENT_APP_NAME}:${CIRCLE_SHA1} --platform managed --allow-unauthenticated --project ${PROJECT_ID}
  deploy_production_client:
    working_directory: ~/project/client
    docker:
      - image: google/cloud-sdk:alpine
    steps:
      - checkout:
          path: ~/project
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Configure gcloud
          command: |
            echo $PROD_CLIENT_GCLOUD_SERVICE_KEY | base64 -d | gcloud auth activate-service-account --key-file=-
            gcloud config set project ${PROJECT_ID}
            gcloud config set run/region ${PROD_CLIENT_REGION}
            gcloud auth configure-docker
      - run:
          name: Build and tag Docker image
          command: |
            docker build -t gcr.io/${PROJECT_ID}/${PROD_CLIENT_APP_NAME}:${CIRCLE_SHA1} .
            docker tag gcr.io/${PROJECT_ID}/${PROD_CLIENT_APP_NAME}:${CIRCLE_SHA1} gcr.io/${PROJECT_ID}/${PROD_CLIENT_APP_NAME}:latest
      - run:
          name: Push Docker image to Container Registry
          command: |
            docker push gcr.io/${PROJECT_ID}/${PROD_CLIENT_APP_NAME}:${CIRCLE_SHA1}
            docker push gcr.io/${PROJECT_ID}/${PROD_CLIENT_APP_NAME}:latest
      - run:
          name: Deploy to Cloud Run
          command: |
            gcloud run deploy ${PROD_CLIENT_APP_NAME} --region ${PROD_CLIENT_REGION} --image gcr.io/${PROJECT_ID}/${PROD_CLIENT_APP_NAME}:${CIRCLE_SHA1} --platform managed --allow-unauthenticated --project ${PROJECT_ID}

workflows:
  build_test_deploy_backend:
    jobs:
      - lint_backend
      - build_test_backend
      - deploy_staging_backend:
          requires:
            - build_test_backend
          filters:
            branches:
              only: staging
      - deploy_production_backend:
          requires:
            - build_test
          filters:
            branches:
              only: production
  build_test_deploy_client:
    jobs:
      - lint_client
      - build_test_client
      - deploy_staging_client:
          requires:
            - build_test_client
          filters:
            branches:
              only: staging
      - deploy_production_client:
          requires:
            - build_test_client
          filters:
            branches:
              only: production